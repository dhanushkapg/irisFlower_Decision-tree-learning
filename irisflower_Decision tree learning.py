# -*- coding: utf-8 -*-
"""irisFlowerDataSet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MEh83P3SN0FSa2aC_cEOy-Ux7wQYG1bc
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris #iris data set is in sklearn library

#load features DataSets 
dataSet=load_iris()
#print(dataSet.data) #print features set
print(dataSet.feature_names) # print dataSet headers 
print(dataSet.target_names)
#print(dataSet.data.shape)# print data set's no.of columns and no.of raws
#dataFrame=dataSet[0]
#print(dataFrame)

#target or result data set 
print(dataSet.target.shape) # print target dataset

#divide data and target into data=X and target = Y
X=pd.DataFrame(dataSet.data,columns=dataSet.feature_names) # data frame format unstructured dataSet to structured manner like excel format
print(X)

Y=dataSet.target #target assign into Y array variable 
print(Y)

#spliting X and Y into train and test
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test =  train_test_split(X,Y,test_size=0.25,random_state=0)
print(X_train)
print(y_train)

#Finding max depth . We can draw graph for that 
#import algorithm 
accuracy=[]  ##accuracy array that hold indivigual accuracy scores
from sklearn.tree import DecisionTreeClassifier  # model or algorithm
from sklearn.metrics import accuracy_score  # accuracy score 
import matplotlib.pyplot as plt # packages for drawing graph

for i in range(1,10):#Depth range is 1 to 10 (decision tree depth)
  model=DecisionTreeClassifier(max_depth=i,criterion='entropy',random_state=0) # Create model object from decision tree clariffier algorithm 
  model.fit(X_train,y_train) #input train data to training model
  y_pred=model.predict(X_test) # predit result of test data set
  score= accuracy_score(y_test,y_pred) # check accuracy by comparing test data result and actual test result set
  print(score)
  accuracy.append(score) #appending each range value scores  to accuracy array
  #start drawing graph
  
  
plt.figure(figsize=(12,6)) #graph width and heigth
plt.plot(range(1,10),accuracy,color='red',linestyle='--',marker='o',markerfacecolor='blue',markersize='10') # graph parameters
plt.title('fining best max depth') #title
plt.xlabel='prediction'

#after identify max depth in the decision three model 
# we have to re-train model using max depth 
model=DecisionTreeClassifier(max_depth=3,criterion='entropy',random_state=0)
model.fit(X_train,y_train )

#start prediction with newly trained model
y_newPred=model.predict(X_test)
print(y_newPred)

#print y_newpredit and y_test original test result as vertically formatted way
print(np.concatenate((y_newPred.reshape(len(y_newPred),1),y_test.reshape(len(y_test),1)),1))

#accuracy score
from sklearn.metrics import accuracy_score
print('Accuracy is {0}%'.format(accuracy_score(y_test,y_newPred)*100))